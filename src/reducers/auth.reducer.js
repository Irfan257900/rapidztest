import { createSlice } from "@reduxjs/toolkit";
import { USER_FOUND, USER_EXPIRING, USER_EXPIRED, SILENT_RENEW_ERROR } from "redux-oidc";


// Initial state
const initialState = {
  user: null,
  token: null,
  deviceToken: null,
  isLoggedOut: false,
  profile: null,
};

const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    setProfile: (state, action) => {
      state.profile = action.payload;
    },
    setDeviceToken: (state, action) => {
      state.deviceToken = action.payload;
    },
    userToken:(state,action)=>{
        state.token=action.payload
    },
    userLogout: (state) => {
      state.user = null;
      state.profile = null;
      state.token = null;
      state.isLoggedOut = true;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(USER_FOUND, (state, action) => {
        state.user = action.payload;
        state.isLoggedOut = false;
      })
      .addCase(USER_EXPIRING, (state) => {
        // Handle when user's session is expiring
      })
      .addCase(USER_EXPIRED, (state) => {
        state.user = null;
        state.profile = null;
        state.token = null; 
      })
      .addCase(SILENT_RENEW_ERROR, (state) => {
        console.error("Silent renew error");
      })
  },
});

// Export the actions generated by createSlice
export const { setProfile, setDeviceToken, userLogout,userToken } = authSlice.actions;

// Export the reducer for the slice
export default authSlice.reducer;
